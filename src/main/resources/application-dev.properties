server.port=8081
server.session.timeout=900
# 数据库访问配置
# 主数据源，默认的
#spring.datasource.platform=postgres
spring.datasource.primary.driver-class-name=org.postgresql.Driver
spring.datasource.primary.url=jdbc:postgresql://10.8.8.8:5432/onion_api_auto
spring.datasource.primary.username=postgres
spring.datasource.primary.password=Yangcong345
spring.datasource.primary.initialSize=5
spring.datasource.primary.minIdle=2
spring.datasource.primary.maxActive=5
spring.datasource.primary.maxIdle=5
#spring.datasource.primary.minEvictableIdleTimeMillis=90000000
spring.datasource.primary.validationQuery=SELECT 1 FROM DUAL


# *******************第二数据源（课程）*********************
spring.datasource.course.url=jdbc:postgresql://10.8.8.8:5432/course_cp
spring.datasource.course.driverClassName =org.postgresql.Driver
spring.datasource.course.username=postgres
spring.datasource.course.password=Yangcong345
spring.datasource.course.initialSize=2
#spring.datasource.course.minEvictableIdleTimeMillis=90000000
spring.datasource.course.validationQuery=SELECT 1 FROM DUAL

spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.properties.hibernate.hbm2ddl.auto=update
#logging.level.org.hibernate.engine.jdbc.env.internal.LobCreatorBuilderImpl= ERROR
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
#JPA Configuration:
#spring.jpa.database=MYSQL
# Show or not log for each sql query
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true  
# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
#spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy
#spring.jpa.database=org.hibernate.dialect.MySQL5InnoDBDialect
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
#spring.datasource.initialSize=5
#spring.datasource.minIdle=5
#spring.datasource.maxActive=20
## 配置获取连接等待超时的时间
#spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#spring.datasource.timeBetweenEvictionRunsMillis=60000
## 配置一个连接在池中最小生存的时间，单位是毫秒
#spring.datasource.minEvictableIdleTimeMillis=300000
#spring.datasource.validationQuery=SELECT 1 FROM DUAL
#spring.datasource.testWhileIdle=true
#spring.datasource.testOnBorrow=false
#spring.datasource.testOnReturn=false
## 打开PSCache，并且指定每个连接上PSCache的大小
#spring.datasource.poolPreparedStatements=true
#spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
## 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#spring.datasource.filters=stat,wall,log4j
## 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
## 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true
#是否在自动回收超时连接的时候打印连接的超时错误
#spring.datasource.log-abandoned=true
#是否自动回收超时连接
#spring.datasource.remove-abandoned=true
#检测数据库的查询语句
#spring.datasource.dbcp2.validation-query = select 1 from dual
#（即在获取Connection对象时检测其可用性）  这样会影响性能，但是这个配置是最有效的。
#spring.datasource.dbcp2.test-on-borrow = true
#设置当连接被归还时，是否要提交所有还未完成的事务
#spring.datasource.dbcp2.test-on-return = false
#有些数据库连接的时候有超时限制（mysql连接在8小时后断开），或者由于网络中断等原因，连接池的连接会出现失效的情况，这时候设置一个testWhileIdle参数为true，可以保证连接池内部定时检测连接的可用性，不可用的连接会被抛弃或者重建，最大情况的保证从连接池中得到的Connection对象是可用的
#spring.datasource.dbcp2.test-while-idle = true
#每隔五分钟检测空闲超过10分钟的连接
#spring.datasource.dbcp2.min-evictable-idle-time-millis = 600000
#spring.datasource.dbcp2.time-between-eviction-runs-millis = 300000

##最大连接数
#spring.datasource.tomcat.max-active=20
##最大空闲数
#spring.datasource.tomcat.max-idle=8
##最小空闲数
#spring.datasource.tomcat.min-idle=2
##初始化连接数
#spring.datasource.tomcat.initial-size=10

#配置redis数据库连接
spring.redis.host= 127.0.0.1
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=

#spring.redis.jedis.pool.max-idle=20
#spring.redis.jedis.pool.min-idle=1
#spring.redis.jedis.pool.max-active=20
#spring.redis.jedis.pool.max-wait=60000

# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8  
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1  
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8  
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0  
# 连接超时时间（毫秒）
spring.redis.timeout=0 
#默认是索引为的0的数据库
spring.redis.database=0 

#Spring Boot 1.0 默认使用的是 Jedis 客户端，2.0 替换成 Lettuce
## 连接池最大连接数（使用负值表示没有限制） 默认 8
#spring.redis.lettuce.pool.max-active=8
## 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
#spring.redis.lettuce.pool.max-wait=-1
## 连接池中的最大空闲连接 默认 8
#spring.redis.lettuce.pool.max-idle=8
## 连接池中的最小空闲连接 默认 0
#spring.redis.lettuce.pool.min-idle=0

#spring.mvc.view.prefix=/WEB-INF/jsp/
#spring.mvc.view.suffix=.html

# 模板配置
# 这个开发配置为false，避免改了模板还要重启服务器
spring.thymeleaf.cache=false
#启用MVC Thymeleaf视图
spring.thymeleaf.enabled=true
#Content-Type值
spring.thymeleaf.content-type=text/html
#模板编码
spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.encoding=utf-8
## 检查模板是否存在，然后再呈现
spring.thymeleaf.check-template-location=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
# 链中模板解析器的顺序
#spring.thymeleaf.template-resolver-order= o
# 可以解析的视图名称的逗号分隔列表
#spring.thymeleaf.view-names=
#thymeleaf end

spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
server.tomcat.uri-encoding=UTF-8

spring.mvc.static-path-pattern=/**
spring.resources.static-locations=classpath:/,classpath:/resources/,classpath:/static/,classpath:/templates/,file:static/


#-------上传文件配置--------

# 单个文件的大小
spring.http.multipart.max-file-size=50Mb
# 请求中所有文件的大小
spring.http.multipart.max-request-size=100Mb
